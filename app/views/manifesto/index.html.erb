<h1 class="header1">Welcome</h1>

  <p>This Manifesto enables me to create a pleasurable experience for my clients.  I have modeled this off of the Ruby on Rails firm <a href="https://thoughtbot.com/" target="_blank">thoughtbot</a> and their well crafted <a href="http://playbook.thoughtbot.com/" target="_blank">Playbook</a>.  If you are a prospective client, feel free to read my manifesto to gain insight into my philosophy, strategy, and operations.</p>

  <h2 class="header2">Transparency</h2>

  <p>My #1 value is transparency. Transparency is how I conduct my business and professional relationships. I expect anyone I do business with to reciprocate. From recording my time and billing, to keeping accurate backlogs, and giving warnings when bad news is coming are some of the ways I remain transparent with my clients.</p>

<h1 class="header1">My Work Week</h1>

  <p>My work week is designed to maintain a sustainable pace and work life balance.  This model ensures I deliver on milestones, grow my business and maintain a high level proficiency in my craft.</p>

  <h2 class="header2">Time</h2>

    <p>I work a sustainable pace.  I work three days for clients and consulting, and two days on "investment time".  I typically spend Monday - Wednesday on client work and Thursday - Friday on investment.</p>

    <p>If there is a holiday during the week, or if I am sick or unexpectedly absent from client work, I will use investment days as an extra client day to avoid slipping behind schedule.</p>

    <p>When taking a planned vacation for attending a conference spanning multiple days, I generally do not "make up" client work on investment days.</p>

    <p>Sending off-hours communication may create an unintended sense of urgency with the recipients of my message.  I will avoid creating that urgency when possible.</p>

    <p>Unless actually urgent, I will generally ignore off-hour messages which I  receive and handle them once I am back at work.</p>

  <h2 class="header2">Investment Time</h2>

    <p>Investment time is time for investment in myself, my company, and my community.  Primarily this means doing something that interests me like learning a new programming language, contributing to open source, discussing interesting things, attending community events, or reading an educational book.  The goal is to encourage myself to improve and share my knowledge.</p>

    <p>Ideas for investment time include:</p>

    <ul class="bullets">
      <li>Contribute to open source software</li>
      <li>Write a blog post</li>
      <li>Work on conference and meetup talks and proposals</li>
      <li>Volunteer mentor for another solid learning organization</li>
      <li>Meet someone new or make an exsiting relationship stronger</li>
      <li>Answer questions on StackOverflow</li>
      <li>Build on an idea of my own</li>
    </ul>

<h1 class="header1">Web Apps</h1>

  <p>I primarily develop in Ruby on Rails. It’s a robust, proven framework with a large community. It’s well structured, so whether the project is brand new or 5 years old, it’s familiar to other developers and the learning curve won’t be steep. It makes security easy so I can focus on features instead of worrying about cross-site scripting or SQL injection. Out of the box I get an admin interface. The ORM is really nice. I have wonderful deployment tools built and ready to go. Most importantly, there’s a large body of knowledge sitting around you that is intimately familiar with Rails.</p>

  <p>If you decide to go with another framework, that’s cool. I only ask that you consider how it will impact development speed of your project. Ask yourself this: Will others have to learn a new language? Is this framework well supported? What does this framework give me that Rails doesn’t?</p>

  <p>Along with Rails, I like to stick with the standards - HTML, CSS, JavaScript and PostgreSQL. They’re flexible, proven, avoid vendor lock-in, work on tons of devices, and most devs are familiar with them. Please no Flash.</p>

  <p>Outside of the Ruby on Rails stack, I will develop in the Python stack if requested.</p>

  <h2 class="header2">Programming Languages</h2>

    <p>Examples of languages I typically use are:</p>

    <ul class="bullets">
      <li>Ruby: My server-side preference</li>
      <li>Python</li>
      <li>JavaScript</li>
    </ul>

    <p>"Server-side" means code that is run on servers provided by the application hosting company.  "Client-side" means code that is run in users' web browswers.</p>

  <h2 class="header2">Frameworks</h2>

    <p>Ruby on Rails, Node.js, and other libraries are frameworks that require developers know the underlying language such as Ruby or JavaScript.</p>

    <p>Examples of frameworks I typically use are:</p>

    <ul class="bullets">
      <li>Ruby on Rails</li>
      <li>Sinatra</li>
      <li>Django</li>
      <li>Flask</li>
      <li>jQuery</li>
      <li>Angular.js</li>
      <li>Ember.js</li>
    </ul>

    <p>A framework is a library that makes performing a particular task in a programming language easier. Like the framework of a house, it is there when I begin programming and is always there giving the program structure and support.</p>

    <p>It can be difficult to switch from one framework to another. The more code that's written specifically for Rails, the harder it will be to switch to Django. That would approach "total rewrite" territory.</p>

  <h2 class="header2">Databases</h2>

    <p>For data that must be saved and stored correctly, I use PostgreSQL (I usually refer to it as "Postgres").</p>

    <p>It's a 30 year old open source database that is highly respected, well supported by documentation and hosting providers, and used by any developer who knows the SQL standard.</p>

    <p>In recent years, a movement called NoSQL has gained popularity. Best translated as "not only SQL", tremendous effort has been made to create different kinds of databases for different use cases, often based off academic or industry research.</p>

    <p>My most frequently used NoSQL database is Redis, which I use for storing transient, high quantity read/write data such as activity feeds, tags, background jobs, sessions, tokens, and counters.</p>

    <p>Redis is reliable, open-source, and simple. It offers high performance and reliable predictions of its performance. It can flexibly model different data sets but I typically use it for small data structures, not large images, videos, or text documents.</p>

    <p>I typically use Redis to Go to host my production Redis databases.</p>

  <h2 class="header2">Licenses</h2>

    <p>In contrast with a proprietary license, the source code of an open source program is made available for review, modification and redistribution. The difference between open source licenses is what I can and can't do with the source code.</p>

    <p>Open source licenses can be divided in two categories: permissive and copyleft.</p>

    <p>Permissive examples include:</p>

    <ul class="bullets">
      <li>Berkeley Software Distribution (BSD) licenses</li>
      <li>MIT license</li>
      <li>Apache license</li>
      <li>A copyleft example is the General Public License (GPL).</li>
    </ul>

    <p>Both categories have the purpose of establishing the copyright holder for the software, granting users the right to copy, modify and redistribute it, protecting the copyright holder from any potential guarantees that the software may provide (software is provided as-is), and optionally imposing some restrictions.</p>

    <p>Permissive licenses let us modify a program, redistribute it, and even sell it. I can embed or link code with other programs without restriction or explicit permission by the copyright holder.</p>

    <p>Copyleft licenses only allow us to link or distribute code with other code that has the same license. It also forces modifications to be released under the same license. Combining anything with the GPL makes it GPL.</p>

    <p>Non-copyleft licenses do not enforce derivative works to also be open source.</p>

    <p>Some software is released under a dual license: both a permissive and copyleft license. This provides developers who use the dual licensed code to apply the license that better suits their needs.</p>

    <p>Most of the software I use has a permissive license:</p>

    <ul class="bullets">
      <li>PostgreSQL, PostgreSQL License (BSD based)</li>
      <li>Redis, BSD</li>
      <li>Ruby (MRI), Ruby license (BSD based)</li>
      <li>Ruby on Rails, MIT</li>
      <li>jQuery, Dual MIT and GPL</li>
    </ul>

<h1 class="header1">Developing</h1>

  <p>The majority of my development practices follow practices detailed in Kent Beck's classic Extreme Programming Explained: Embrace Change and in Gerald Weinberg's The Psychology of Computer Programming.</p>

  <h2 class="header2">Version Control</h2>

    <p>I always use source code control. It's like a time machine. I can work in parallel universes of my source code, experimenting without fear of losing work. Roll back if something goes wrong.</p>

    <p>Git is an open source source code control system written by Linus Torvalds. It's fast and great for working in branches.</p>

    <p>I use GitHub for hosting my git repositories.</p>

  <h2 class="header2">Style Guide</h2>

    <p>I write code in a consistent style that emphasizes cleanliness and  communication.</p>

    <p>High level guidelines:</p>

    <ul class="bullets">
      <li>Be consistent.</li>
      <li>Don't rewrite existing code to follow this guide.</li>
      <li>Don't violate a guideline without a good reason.</li>
      <li>A reason is good when you can convince a others.</li>
    </ul>

  <h2 class="header2">Test-Driven Development</h2>

    <p>Test-Driven Development (TDD) is perhaps the most important Extreme Programming (XP) rule that I practice.</p>

    <p>Business benefits of TDD:</p>

    <ul class="bullets">
      <li>Deliver more value, faster</li>
      <li>Always ship working software</li>
      <li>Adapt to change quickly</li>
    </ul>

    <p>Code benefits of TDD:</p>

    <ul class="bullets">
      <li>Readable specs and code</li>
      <li>Clean public interfaces</li>
      <li>Decoupled modules</li>
    </ul>

    <p>Process benefits of TDD:</p>

    <ul class="bullets">
      <li>Regression safety net</li>
      <li>Fearless refactoring</li>
      <li>Team trust</li>
    </ul>

    <p>At a high level, how to test is very simple:</p>

    <ul class="bullets">
      <li>Write test first.</li>
      <li>Red-Green-Refactor cycle.</li>
    </ul>

  <h2 class="header2">Acceptance Tests</h2>

    <p>Acceptance tests are code created from jobs stories. This code is run against the application. When executed for the first time, the test will fail. I then write application code until the test passes.</p>

    <p>When the test passes, then I commit the code into version control with a message such as: <code>Guest creates pledge</code></p>

    <p>The code is then run on the Continuous Integration server to make sure the acceptance test still passes in an environment that matches the production environment.</p>

    <p>Meanwhile, the code is pushed to the staging environment and I test it in the browser.</p>

    <p>When the acceptance test is green for the CI server and I am satisfied that the jobs story is complete on staging, the feature can be deployed to production at will. This can result in features being pushed to production very frequently, and therefore more value is being delivered to customers sooner.</p>

  <h2 class="header2">Refactoring</h2>

    <p>The third step of the "red, green, refactor" step is refactoring, the process of improving the design of existing code without altering its external behavior. It's a critical step in the process.</p>

  <h2 class="header2">Production</h2>

    <p>We live in a magical modern era where many problems have already been solved for us. I focus on the client's product as much as possible and outsource operations as much as possible to external services.</p>

    <p>This saves time and money. I can get started using those services in minutes. Our clients pay a service tens or hundreds of dollars per month instead of paying developers thousands or tens of thousands.</p>

    <p>I often create a Google spreadsheet listing the monthly cost, description, and credentials of each of our clients' external services. It includes line items like GitHub, Heroku, SendGrid, New Relic, Airbrake, and Splunk.</p>

<h1 class="header1">Production</h1>

  <p>Most of the things I do are solve problems. There’s no need for me to write my own analytics or crash reporting software or have a physical server. Instead I use services and stick to proven techniques.</p>

  <h2 class="header2">Hosting</h2>

    <p>I use <a href="https://www.heroku.com/" target="_blank">Heroku</a>. It's a platform built on Amazon's cloud infrastructure. It is simple to use when our app is just a toy and is built to scale up for high concurrency or high sustained load.</p>

    <p>Like Rails, Heroku uses conventions to make decisions for us that are unnecessary for us to make. Some things like web servers and app servers are solved problems. They act as our outsourced operations team. The amount of time I can focus on the product instead of solved problems is worth the premium over bare-bones Amazon Web Services.</p>

    <p>The cloud promises lower operating costs, especially at the beginning when capacity can be lower. Forget about sunk costs of expensive servers.</p>

    <p>The cloud and the services it enables will empower our clients' businesses to start and operate in a manner that has never been possible before without significant upfront investment.</p>

    <p>If I offer file uploads for features like user avatars, I upload them to Amazon S3.</p>

    <p>I also serve my images, CSS, and JavaScript assets from a CDN such as Fastly.</p>

  <h2 class="header2">Performance Monitoring</h2>

    <p>I use <a href="http://newrelic.com/" target="_blank">NewRelic</a> (Free-$100s/month) to monitor performance of production applications.</p>

    <p>Debugging performance might be the best part of a developer's job. There's a clear, numeric problem. When I fix it, that number improves. I can say things like "I made this 175% better."</p>

    <p>There's many established techniques for fixing performance problems. A number of them come "for free" with Rails + Heroku:</p>

    <ul class="bullets">
      <li>Amazon server clusters</li>
      <li>gzipping</li>
      <li>Asset pipeline</li>
      <li>SQL query caching</li>
    </ul>

    <p>A number of them require developer thought:</p>

    <ul class="bullets">
      <li>Database indexing</li>
      <li>Eager loading</li>
      <li>HTTP caching</li>
    </ul>

    <p>Page caching is the heaviest handed technique I have, but if I can cache an entire page and push it into a CDN, that will be the fastest option.</p>

  <h2 class="header2">Error Tracking</h2>

    <p>I use <a href="https://rollbar.com/" target="_blank">Rollbar</a> Bug Tracker (Free-$249/month).</p>

  <h2 class="header2">Transactional Email</h2>

    <p>I use <a href="https://www.sendgrid.com/" target="_blank">Sendgrid</a> (free - $399.95 per month) to have our application deliver email to users, known as transactional email.</p>

    <p>Examples of transactional email are:</p>

    <ul class="bullets">
      <li>Confirmations</li>
      <li>Follow ups after the first 3 days of use</li>
      <li>Free trial is expiring</li>
      <li>Message another user in the system</li>
    </ul>

  <h2 class="header2">Payment Processing</h2>

    <p>For collecting payments from users via credit or debit card, I use <a href="https://stripe.com/" target="_blank">Stripe</a>. It is a payment gateway and merchant account. I also use it for recurring billing.</p>

    <p>Charges for Stripe will vary depending on usage. Successful charges are 2.9% + 30 cents. There are no setup fees, monthly fees, or card storage fees.</p>

<h1 class="header1">Sales</h1>

  <p>I am a developer. I want to design and develop software. Before I can do that, I need clients to hire me. The following section details how my sales process works and answers commonly asked questions by potential clients.</p>

  <p>The overall process is:</p>

  <ul class="bullets">
    <li>Someone contacts me.</li>
    <li>I have them fill out our new project form.</li>
    <li>I have a phone call or meet them for coffee.</li>
    <li>Qualify/disqualify: am I a good fit for the client?</li>
    <li>Qualify/disqualify: is the client a good fit for me?</li>
    <li>Understand the client's vision.</li>
    <li>Agree to the outcomes we're trying to achieve.</li>
    <li>Estimate iterations.</li>
    <li>Schedule for the iterations.</li>
    <li>Sign the contract.</li>
    <li>Pay me for the first iteration.</li>
    <li>I begin work.</li>
  </ul>

  <h2 class="header2">No Fixed Bids</h2>

    <p>Some consulting relationships start with a requirements document or RFP ("Request For Proposal"). The requirements are often extremely detailed.</p>

    <p>The probability of this document containing the optimum feature set is extremely low. The right features are better learned through user interviews, prototyping, releasing actual software, and getting feedback from real users.</p>

    <p>Based on that document, clients expect consultants in the industry to submit an exact timeframe and bid. This contract style sets the client and consultant working against each other right from day one. Instead of focusing on designing the product experience or evaluating what assumptions were wrong, they spend time negotiating about what was meant in a document written a long time ago or focusing on arbitrary deadlines. But it's worse than negotiating; it's retroactively discussing something that no one remembers the same way.</p>

    <p>As you might have guessed, I don't do fixed-bid, fixed-feature-set proposals.</p>

  <h2 class="header2">Budget</h2>

    <p>I do <a href="https://medium.com/@monteiro/why-i-need-to-know-your-budget-a61ec864c898" target="_blank">need to know clients' budgets</a>. This is often uncomfortable for them but their budget helps determines what scope is possible. It saves time. If they don't know their budget, I discuss different options.</p>

    <p>I talk about breaking product rollout into stages and try to improve the product's chances of success at each stage by:</p>

    <ul class="bullets">
      <li>Focusing on a small subset of features.</li>
      <li>Designing a valuable user experience.</li>
      <li>Developing a meaningful relationship with users.</li>
      <li>Budgeting for marketing tactics to tell users about the product.</li>
      <li>Designing interactions into the product for users to bring other users to the product.</li>
    </ul>

    <h2 class="header2">Do Not Exceed</h2>

    <p>A Do Not Exceed is a term referring to a number that both parties will actively work towards to not exceed. I bill in a Time &amp; Materials manner (hourly), and give copious amounts of updates along the way for my clients. This means that when I reach key milestones in my budget, I will inform my client, revisit my projectons, and readjust my expectations.</p>

    <p>I like this approach because it is a mutual process to ensure that design and engineering budgets are not over-committed and yet are not over-estimated. Each week as I work through the backlog of work in front of me, I should have a clearer and clearer picture of when the launch will occur. If I project a launch past the budget amount, I work with the client to ensure appropriate alternatives to fit within the Timeline.</p>